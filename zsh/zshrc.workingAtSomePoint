for script in $HOME/.scripts/*; do
  source $script
done

# Used to import private scripts stored in my bitbucket repository
if [[ -d "$HOME/.scripts.private" ]]; then
  for script in $HOME/.scripts.private/*; do
    source $script
  done
fi

export PATH=.:~/bin:~/.local/bin:$PATH
export EDITOR="vim"

# If no GPG Suite https://help.github.com/articles/telling-git-about-your-gpg-key/
export GPG_TTY=$(tty)

# Adding colors to more & less commands, cat is also colored with an alias
export MORE='-R'
export LESSOPEN='|pygmentize %s'
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=3"

# Directory where brew command installs nvm
export NVM_DIR="/usr/local/opt/nvm"

# Needed by lm command
if [[ -d ~/.plenv ]]; then
  export PLENV_ROOT=~/.plenv
  export PLENV_SHELL=zsh
  PLENV_VERSION=$(<$PLENV_ROOT/version)
  export PATH="$PLENV_ROOT/shims:$PLENV_ROOT/versions/$PLENV_VERSION/bin:$PATH"
fi

# To review if they are really needed, they increase considerable the shell init time
# # To enable shims and autocompletion add to your profile:
# if which jenv > /dev/null; then eval "$(jenv init - --no-rehash)"; fi

# if command -v pyenv 1>/dev/null 2>&1; then
#   eval "$(pyenv init - --no-rehash)"
# fi

# https://www.iterm2.com/documentation-shell-integration.html
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

load-nvmrc() {
  [[ -a .nvmrc ]] || return

  if [[ -f .nvmrc && -r .nvmrc ]]; then
    nvm use
  fi
}

check-local-java() {
  [[ -a .java-version ]] || return

  if [[ -f .java-version && -r .java-version ]]; then
    command printf "Now using local version of java: $(cat .java-version)\n"
  fi
}

# Automatically call nvm use if the folder has a .nvmrc file
autoload -U add-zsh-hook
add-zsh-hook chpwd load-nvmrc
add-zsh-hook chpwd check-local-java

export ZSH_COMPDUMP=/tmp/zcompdump-$USER
### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing DHARMA Initiative Plugin Manager (zdharma/zinit)…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f" || \
        print -P "%F{160}▓▒░ The clone has failed.%f"
fi
source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit installer's chunk

# Prompt configuration
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(virtualenv os_icon context dir vcs terraform)
POWERLEVEL9K_CONTEXT_TEMPLATE="%n"
POWERLEVEL9K_SHORTEN_DIR_LENGTH=3
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status ssh time)
POWERLEVEL9K_STATUS_VERBOSE=false
POWERLEVEL9K_SHORTEN_STRATEGY="truncate_middle"
POWERLEVEL9K_SHORTEN_DIR_LENGTH=3
POWERLEVEL9K_CONTEXT_DEFAULT_FOREGROUND='black'
POWERLEVEL9K_CONTEXT_DEFAULT_BACKGROUND='green'

# The next 3 it's for general aliases and they provide the terminal colored output
zinit snippet PZT::modules/gnu-utility/init.zsh
zstyle ':prezto:*:*' color 'yes'
zinit snippet PZT::modules/utility/init.zsh
unalias lm

zinit ice wait lucid svn blockf \
    atclone'git clone --depth 3 https://github.com/zsh-users/zsh-completions.git external'
zinit snippet PZT::modules/completion

zinit wait lucid for \
 atinit"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" \
    zdharma/fast-syntax-highlighting \
 blockf \
    zsh-users/zsh-completions \
 atload"!_zsh_autosuggest_start" \
    zsh-users/zsh-autosuggestions

# Other zinit plugins and snippets
# Fasd is to autojump to folders with j or z (custom alias) (If moved after zsh-history-substring-search then the latter does not work)
zinit for \
  Powerlevel9k/powerlevel9k \
  PZT::modules/fasd/init.zsh \
  zsh-users/zsh-history-substring-search \
  PZT::modules/directory/init.zsh

# Plugins loaded using Turbo mode (https://zdharma.org/zinit/wiki/INTRODUCTION/#turbo_mode_zsh_53)
zinit wait lucid for \
  OMZ::plugins/git/git.plugin.zsh \
  PZT::modules/history/init.zsh \
  OMZ::plugins/nvm/nvm.plugin.zsh

# Binding the UP and DOWN key for zsh-history-substring-search (need to be defined after the plugin)
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey "$terminfo[kcuu1]" history-substring-search-up
bindkey "$terminfo[kcud1]" history-substring-search-down
